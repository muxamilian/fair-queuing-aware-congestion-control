
@techreport{bachl_detecting_2021,
	title = {Detecting {Fair} {Queuing} for {Better} {Congestion} {Control}},
	url = {http://arxiv.org/abs/2010.08362},
	abstract = {Low delay is an explicit requirement for applications such as cloud gaming and video conferencing. Delay-based congestion control can achieve the same throughput but significantly smaller delay than loss-based one and is thus ideal for these applications. However, when a delay- and a loss-based flow compete for a bottleneck, the loss-based one can monopolize all the bandwidth and starve the delay-based one. Fair queuing at the bottleneck link solves this problem by assigning an equal share of the available bandwidth to each flow. However, so far no end host based algorithm to detect fair queuing exists. Our contribution is the development of an algorithm that detects fair queuing at flow startup and chooses delay-based congestion control if there is fair queuing. Otherwise, loss-based congestion control can be used as a backup option. Results show that our algorithm reliably detects fair queuing and can achieve low delay and high throughput in case fair queuing is detected.},
	number = {arXiv:2010.08362},
	urldate = {2022-05-29},
	institution = {arXiv},
	author = {Bachl, Maximilian and Fabini, Joachim and Zseby, Tanja},
	month = feb,
	year = {2021},
	doi = {10.48550/arXiv.2010.08362},
	note = {arXiv:2010.08362 [cs]
type: article},
	keywords = {Computer Science - Networking and Internet Architecture},
	file = {arXiv Fulltext PDF:/home/max/Zotero/storage/F45RBWYF/Bachl et al. - 2021 - Detecting Fair Queuing for Better Congestion Contr.pdf:application/pdf;arXiv.org Snapshot:/home/max/Zotero/storage/WYTBIDPI/2010.html:text/html},
}

@article{brakmo_tcp_1995,
	title = {{TCP} {Vegas}: end to end congestion avoidance on a global {Internet}},
	volume = {13},
	issn = {1558-0008},
	shorttitle = {{TCP} {Vegas}},
	doi = {10.1109/49.464716},
	abstract = {Vegas is an implementation of TCP that achieves between 37 and 71\% better throughput on the Internet, with one-fifth to one-half the losses, as compared to the implementation of TCP in the Reno distribution of BSD Unix. This paper motivates and describes the three key techniques employed by Vegas, and presents the results of a comprehensive experimental performance study, using both simulations and measurements on the Internet, of the Vegas and Reno implementations of TCP.{\textless}{\textgreater}},
	number = {8},
	journal = {IEEE Journal on Selected Areas in Communications},
	author = {Brakmo, L.S. and Peterson, L.L.},
	month = oct,
	year = {1995},
	note = {Conference Name: IEEE Journal on Selected Areas in Communications},
	keywords = {Adaptive control, Bandwidth, Computer science, Internet, Jacobian matrices, Programmable control, Protocols, TCPIP, Testing, Throughput},
	pages = {1465--1480},
	file = {IEEE Xplore Abstract Record:/home/max/Zotero/storage/Z7FSJG72/464716.html:text/html;Submitted Version:/home/max/Zotero/storage/W8YEN24V/Brakmo and Peterson - 1995 - TCP Vegas end to end congestion avoidance on a gl.pdf:application/pdf},
}

@inproceedings{hock_tcp_2017,
	title = {{TCP} {LoLa}: {Congestion} {Control} for {Low} {Latencies} and {High} {Throughput}},
	shorttitle = {{TCP} {LoLa}},
	doi = {10.1109/LCN.2017.42},
	abstract = {TCP LoLa is a new delay-based congestion control that supports both, low queuing delay and high network utilization in high speed wide-area networks. This is particularly useful for traffic mixes consisting of bandwidth demanding and delay sensitive flows (e.g., long file transfer and interactive "web 2.0" traffic). TCP LoLa keeps the queuing delay at the bottleneck link low around a fixed target threshold value. This target value is independent from the number of flows sharing the bottleneck. TCP LoLa achieves high link utilization and attains convergence to fairness even among flows with different round-trip times, due to its novel mechanism called "fair flow balancing".},
	booktitle = {2017 {IEEE} 42nd {Conference} on {Local} {Computer} {Networks} ({LCN})},
	author = {Hock, Mario and Neumeister, Felix and Zitterbart, Martina and Bless, Roland},
	month = oct,
	year = {2017},
	note = {ISSN: 0742-1303},
	keywords = {Bandwidth, Internet, Throughput, Congestion control, Convergence, Delays, Receivers},
	pages = {215--218},
	file = {IEEE Xplore Abstract Record:/home/max/Zotero/storage/WQ7FLQ8F/8109356.html:text/html},
}

@article{cardwell_bbr_2016,
	title = {{BBR}: {Congestion}-{Based} {Congestion} {Control}},
	volume = {14, September-October},
	shorttitle = {{BBR}},
	url = {http://queue.acm.org/detail.cfm?id=3022184},
	urldate = {2022-05-29},
	journal = {ACM Queue},
	author = {Cardwell, Neal and Cheng, Yuchung and Gunn, C. Stephen and Yeganeh, Soheil Hassas and Jacobson, Van},
	year = {2016},
	pages = {20 -- 53},
}

@inproceedings{dong_pcc_2015,
	title = {{PCC}: {Re}-architecting {Congestion} {Control} for {Consistent} {High} {Performance}},
	isbn = {978-1-931971-21-8},
	shorttitle = {{PCC}},
	url = {https://www.usenix.org/conference/nsdi15/technical-sessions/presentation/dong},
	language = {en},
	urldate = {2022-05-29},
	author = {Dong, Mo and Li, Qingxi and Zarchy, Doron and Godfrey, P. Brighten and Schapira, Michael},
	year = {2015},
	pages = {395--408},
	file = {Full Text PDF:/home/max/Zotero/storage/Y75V7L7W/Dong et al. - 2015 - PCC Re-architecting Congestion Control for Cons.pdf:application/pdf;Snapshot:/home/max/Zotero/storage/7YB8UUNZ/dong.html:text/html},
}

@inproceedings{hoiland-jorgensen_piece_2018,
	title = {Piece of {CAKE}: a comprehensive queue management solution for home gateways},
	shorttitle = {Piece of {CAKE}},
	booktitle = {2018 {IEEE} {International} {Symposium} on {Local} and {Metropolitan} {Area} {Networks} ({LANMAN})},
	publisher = {IEEE},
	author = {Høiland-Jørgensen, Toke and Täht, Dave and Morton, Jonathan},
	year = {2018},
	pages = {37--42},
}

@techreport{hoeiland-joergensen_flow_2018,
	title = {The flow queue codel packet scheduler and active queue management algorithm},
	author = {Hoeiland-Joergensen, Toke and McKenney, Paul and Taht, Dave and Gettys, Jim and Dumazet, Eric},
	year = {2018},
}

@inproceedings{ware_beyond_2019,
	address = {Princeton NJ USA},
	title = {Beyond {Jain}'s {Fairness} {Index}: {Setting} the {Bar} {For} {The} {Deployment} of {Congestion} {Control} {Algorithms}},
	isbn = {978-1-4503-7020-2},
	shorttitle = {Beyond {Jain}'s {Fairness} {Index}},
	url = {https://dl.acm.org/doi/10.1145/3365609.3365855},
	doi = {10.1145/3365609.3365855},
	abstract = {The Internet community faces an explosion in new congestion control algorithms such as Copa, Sprout, PCC, and BBR. In this paper, we discuss considerations for deploying new algorithms on the Internet. While past efforts have focused on achieving ‘fairness’ or ‘friendliness’ between new algorithms and deployed algorithms, we instead advocate for an approach centered on quantifying and limiting harm caused by the new algorithm on the status quo. We argue that a harm-based approach is more practical, more future proof, and handles a wider range of quality metrics than traditional notions of fairness and friendliness.},
	language = {en},
	urldate = {2022-05-29},
	booktitle = {Proceedings of the 18th {ACM} {Workshop} on {Hot} {Topics} in {Networks}},
	publisher = {ACM},
	author = {Ware, Ranysha and Mukerjee, Matthew K. and Seshan, Srinivasan and Sherry, Justine},
	month = nov,
	year = {2019},
	pages = {17--24},
	file = {Ware et al. - 2019 - Beyond Jain's Fairness Index Setting the Bar For .pdf:/home/max/Zotero/storage/FBU2ZI58/Ware et al. - 2019 - Beyond Jain's Fairness Index Setting the Bar For .pdf:application/pdf},
}

@inproceedings{ware_modeling_2019,
	address = {Amsterdam Netherlands},
	title = {Modeling {BBR}'s {Interactions} with {Loss}-{Based} {Congestion} {Control}},
	isbn = {978-1-4503-6948-0},
	url = {https://dl.acm.org/doi/10.1145/3355369.3355604},
	doi = {10.1145/3355369.3355604},
	abstract = {BBR is a new congestion control algorithm (CCA) deployed for Chromium QUIC and the Linux kernel. As the default CCA for YouTube (which commands 11+\% of Internet traffic), BBR has rapidly become a major player in Internet congestion control. BBR’s fairness or friendliness to other connections has recently come under scrutiny as measurements from multiple research groups have shown undesirable outcomes when BBR competes with traditional CCAs. One such outcome is a fixed, 40\% proportion of link capacity consumed by a single BBR flow when competing with as many as 16 loss-based algorithms like Cubic or Reno. In this short paper, we provide the first model capturing BBR’s behavior in competition with loss-based CCAs. Our model is coupled with practical experiments to validate its implications. The key lesson is this: under competition, BBR becomes window-limited by its ‘in-flight cap’ which then determines BBR’s bandwidth consumption. By modeling the value of BBR’s in-flight cap under varying network conditions, we can predict BBR’s throughput when competing against Cubic flows with a median error of 5\%, and against Reno with a median of 8\%.},
	language = {en},
	urldate = {2022-05-29},
	booktitle = {Proceedings of the {Internet} {Measurement} {Conference}},
	publisher = {ACM},
	author = {Ware, Ranysha and Mukerjee, Matthew K. and Seshan, Srinivasan and Sherry, Justine},
	month = oct,
	year = {2019},
	pages = {137--143},
	file = {Ware et al. - 2019 - Modeling BBR's Interactions with Loss-Based Conges.pdf:/home/max/Zotero/storage/WD22TQ7V/Ware et al. - 2019 - Modeling BBR's Interactions with Loss-Based Conges.pdf:application/pdf},
}

@inproceedings{gilad_mpcc_2020,
	address = {Barcelona Spain},
	title = {{MPCC}: online learning multipath transport},
	isbn = {978-1-4503-7948-9},
	shorttitle = {{MPCC}},
	url = {https://dl.acm.org/doi/10.1145/3386367.3433030},
	doi = {10.1145/3386367.3433030},
	abstract = {Multipath transport, as embodied in MPTCP, is deployed to improve throughput and reliability in mobile and residential access networks, with additional use-cases including spreading load in data centers and WANs. However, MPTCP is fundamentally tied to TCP Reno’s legacy AIMD algorithm, and significantly lags behind the performance of modern single-path designs. Consequently, MPTCP fails to achieve high performance in many real-world environments. We present MPCC, a high-performance multipath congestion control architecture. To achieve our combined goals of fairness and high performance in challenging environments, MPCC employs online convex optimization (a.k.a. online learning). In experiments with a kernel implementation on emulated and live networks, MPCC significantly outperforms MPTCP.},
	language = {en},
	urldate = {2022-05-29},
	booktitle = {Proceedings of the 16th {International} {Conference} on emerging {Networking} {EXperiments} and {Technologies}},
	publisher = {ACM},
	author = {Gilad, Tomer and Rozen-Schiff, Neta and Godfrey, P. Brighten and Raiciu, Costin and Schapira, Michael},
	month = nov,
	year = {2020},
	pages = {121--135},
	file = {Gilad et al. - 2020 - MPCC online learning multipath transport.pdf:/home/max/Zotero/storage/NXAV4XZI/Gilad et al. - 2020 - MPCC online learning multipath transport.pdf:application/pdf},
}

@inproceedings{brown_future_2020,
	address = {Virtual Event USA},
	title = {On the {Future} of {Congestion} {Control} for the {Public} {Internet}},
	isbn = {978-1-4503-8145-1},
	url = {https://dl.acm.org/doi/10.1145/3422604.3425939},
	doi = {10.1145/3422604.3425939},
	abstract = {The conventional wisdom requires that all congestion control algorithms deployed on the public Internet be TCP-friendly. If universally obeyed, this requirement would greatly constrain the future of such congestion control algorithms. If partially ignored, as is increasingly likely, then there could be significant inequities in the bandwidth received by different flows. To avoid this dilemma, we propose an alternative to the TCP-friendly paradigm that can accommodate innovation, is consistent with the Internet’s current economic model, and is feasible to deploy given current usage trends.},
	language = {en},
	urldate = {2022-05-29},
	booktitle = {Proceedings of the 19th {ACM} {Workshop} on {Hot} {Topics} in {Networks}},
	publisher = {ACM},
	author = {Brown, Lloyd and Ananthanarayanan, Ganesh and Katz-Bassett, Ethan and Krishnamurthy, Arvind and Ratnasamy, Sylvia and Schapira, Michael and Shenker, Scott},
	month = nov,
	year = {2020},
	pages = {30--37},
	file = {Brown et al. - 2020 - On the Future of Congestion Control for the Public.pdf:/home/max/Zotero/storage/B32H3H2E/Brown et al. - 2020 - On the Future of Congestion Control for the Public.pdf:application/pdf},
}

@article{hayes_online_2020,
	title = {Online {Identification} of {Groups} of {Flows} {Sharing} a {Network} {Bottleneck}},
	volume = {28},
	number = {5},
	journal = {IEEE/ACM Transactions on Networking},
	author = {Hayes, David A. and Welzl, Michael and Ferlin, Simone and Ros, David and Islam, Safiqul},
	year = {2020},
	note = {Publisher: IEEE},
	pages = {2229--2242},
}

@techreport{goyal_elasticity_2020,
	title = {Elasticity {Detection}: {A} {Building} {Block} for {Internet} {Congestion} {Control}},
	shorttitle = {Elasticity {Detection}},
	url = {http://arxiv.org/abs/1802.08730},
	abstract = {This paper introduces Nimbus, a robust technique to detect whether the cross traffic competing with a flow is "elastic", and shows that this elasticity detector improves congestion control. If cross traffic is inelastic, then a sender can control queueing delays while achieving high throughput, but in the presence of elastic traffic, it may lose throughput if it attempts to control packet delay. To estimate elasticity, Nimbus modulates the flow's sending rate with sinusoidal pulses that create small traffic fluctuations at the bottleneck link, and measures the frequency response of the rate of the cross traffic. Our results on emulated and real-world paths show that congestion control using elasticity detection achieves throughput comparable to Cubic, but with delays that are 50-70 ms lower when cross traffic is inelastic. Nimbus detects the nature of the cross traffic more accurately than Copa, and is usable as a building block by other end-to-end algorithms.},
	number = {arXiv:1802.08730},
	urldate = {2022-06-01},
	institution = {arXiv},
	author = {Goyal, Prateesh and Narayan, Akshay and Cangialosi, Frank and Narayana, Srinivas and Alizadeh, Mohammad and Balakrishnan, Hari},
	month = feb,
	year = {2020},
	doi = {10.48550/arXiv.1802.08730},
	note = {arXiv:1802.08730 [cs]
type: article},
	keywords = {Computer Science - Networking and Internet Architecture},
	file = {arXiv Fulltext PDF:/home/max/Zotero/storage/CGLILM3N/Goyal et al. - 2020 - Elasticity Detection A Building Block for Interne.pdf:application/pdf;arXiv.org Snapshot:/home/max/Zotero/storage/KGFBVDMG/1802.html:text/html},
}

@techreport{nagle_packet_1985,
	type = {Request for {Comments}},
	title = {On {Packet} {Switches} {With} {Infinite} {Storage}},
	url = {https://datatracker.ietf.org/doc/rfc970},
	abstract = {The purpose of this RFC is to focus discussion on a particular problem in the ARPA-Internet and possible methods of solution. Most prior work on congestion in datagram systems focuses on buffer management. In this memo the case of a packet switch with infinite storage is considered. Such a packet switch can never run out of buffers. It can, however, still become congested. The meaning of congestion in an infinite-storage system is explored. An unexpected result is found that shows a datagram network with infinite storage, first-in-first-out queuing, at least two packet switches, and a finite packet lifetime will, under overload, drop all packets. By attacking the problem of congestion for the infinite-storage case, new solutions applicable to switches with finite storage may be found. No proposed solutions this document are intended as standards for the ARPA-Internet at this time.},
	number = {RFC 970},
	urldate = {2022-06-01},
	institution = {Internet Engineering Task Force},
	author = {Nagle, John},
	month = dec,
	year = {1985},
	doi = {10.17487/RFC0970},
	note = {Num Pages: 9},
	file = {Full Text PDF:/home/max/Zotero/storage/FTG242FG/1985 - On Packet Switches With Infinite Storage.pdf:application/pdf},
}

@misc{dumazet_pkt_sched_2013,
	title = {pkt\_sched: fq: {Fair} {Queue} packet scheduler [{LWN}. net]},
	author = {Dumazet, Eric},
	year = {2013},
}

@article{ha_cubic_2008,
	title = {{CUBIC}: a new {TCP}-friendly high-speed {TCP} variant},
	volume = {42},
	issn = {0163-5980},
	shorttitle = {{CUBIC}},
	url = {https://doi.org/10.1145/1400097.1400105},
	doi = {10.1145/1400097.1400105},
	abstract = {CUBIC is a congestion control protocol for TCP (transmission control protocol) and the current default TCP algorithm in Linux. The protocol modifies the linear window growth function of existing TCP standards to be a cubic function in order to improve the scalability of TCP over fast and long distance networks. It also achieves more equitable bandwidth allocations among flows with different RTTs (round trip times) by making the window growth to be independent of RTT -- thus those flows grow their congestion window at the same rate. During steady state, CUBIC increases the window size aggressively when the window is far from the saturation point, and the slowly when it is close to the saturation point. This feature allows CUBIC to be very scalable when the bandwidth and delay product of the network is large, and at the same time, be highly stable and also fair to standard TCP flows. The implementation of CUBIC in Linux has gone through several upgrades. This paper documents its design, implementation, performance and evolution as the default TCP algorithm of Linux.},
	number = {5},
	urldate = {2022-06-01},
	journal = {ACM SIGOPS Operating Systems Review},
	author = {Ha, Sangtae and Rhee, Injong and Xu, Lisong},
	month = jul,
	year = {2008},
	pages = {64--74},
}

@techreport{liu_multipath_2022,
	type = {Internet {Draft}},
	title = {Multipath {Extension} for {QUIC}},
	url = {https://datatracker.ietf.org/doc/draft-ietf-quic-multipath},
	abstract = {This document specifies a multipath extension for the QUIC protocol to enable the simultaneous usage of multiple paths for a single connection. Discussion Venues This note is to be removed before publishing as an RFC. Discussion of this document takes place on the QUIC Working Group mailing list (quic@ietf.org), which is archived at https://mailarchive.ietf.org/arch/browse/quic/. Source for this draft and an issue tracker can be found at https://github.com/mirjak/draft-lmbdhk-quic-multipath.},
	number = {draft-ietf-quic-multipath-01},
	urldate = {2022-06-12},
	institution = {Internet Engineering Task Force},
	author = {Liu, Yanmei and Ma, Yunfei and Coninck, Quentin De and Bonaventure, Olivier and Huitema, Christian and Kühlewind, Mirja},
	month = mar,
	year = {2022},
	note = {Num Pages: 28},
	annote = {Work in Progress},
	file = {Full Text PDF:/home/max/Zotero/storage/3EYRW5VH/Liu et al. - 2022 - Multipath Extension for QUIC.pdf:application/pdf},
}

@article{mathis_relentless_2009,
	title = {Relentless {Congestion} {Control}},
	abstract = {Relentless congestion control is a simple modiﬁcation to AIMD congestion control: instead of halving cwnd after a loss, cwnd is reduced by the number of lost segments. It can be modeled as a strict implementation of Van Jacobson’s Packet Conservation Principle.},
	language = {en},
	author = {Mathis, Matthew},
	year = {2009},
	pages = {4},
	file = {Mathis - Relentless Congestion Control.pdf:/home/max/Zotero/storage/S7W3JPN3/Mathis - Relentless Congestion Control.pdf:application/pdf},
}

@incollection{hutchison_revisiting_2011,
	address = {Berlin, Heidelberg},
	title = {Revisiting {TCP} {Congestion} {Control} {Using} {Delay} {Gradients}},
	volume = {6641},
	isbn = {978-3-642-20797-6 978-3-642-20798-3},
	url = {http://link.springer.com/10.1007/978-3-642-20798-3_25},
	abstract = {Traditional loss-based TCP congestion control (CC) tends to induce high queuing delays and perform badly across paths containing links that exhibit packet losses unrelated to congestion. Delay-based TCP CC algorithms infer congestion from delay measurements and tend to keep queue lengths low. To date most delay-based CC algorithms do not coexist well with loss-based TCP, and require knowledge of a network path’s RTT characteristics to establish delay thresholds indicative of congestion. We propose and implement a delay-gradient CC algorithm (CDG) that no longer requires knowledge of path-speciﬁc minimum RTT or delay thresholds. Our FreeBSD implementation is shown to coexist reasonably with loss-based TCP (NewReno) in lightly multiplexed environments, share capacity fairly between instances of itself and NewReno, and exhibits improved tolerance of non-congestion related losses (86 \% better goodput than NewReno in the presence of 1 \% packet losses).},
	language = {en},
	urldate = {2022-06-13},
	booktitle = {{NETWORKING} 2011},
	publisher = {Springer Berlin Heidelberg},
	author = {Hayes, David A. and Armitage, Grenville},
	editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Domingo-Pascual, Jordi and Manzoni, Pietro and Palazzo, Sergio and Pont, Ana and Scoglio, Caterina},
	year = {2011},
	doi = {10.1007/978-3-642-20798-3_25},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {328--341},
	file = {Hayes and Armitage - 2011 - Revisiting TCP Congestion Control Using Delay Grad.pdf:/home/max/Zotero/storage/YMZC7XT4/Hayes and Armitage - 2011 - Revisiting TCP Congestion Control Using Delay Grad.pdf:application/pdf},
}
